// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT
#import "qortexapi.h"

// --- GroupState ---
@implementation GroupState
@synthesize Method = _Method;
@synthesize IsFollowed = _IsFollowed;
@synthesize GroupMenu = _GroupMenu;
@synthesize GroupId = _GroupId;
@synthesize isFollowed = _isFollowed;
@synthesize groupMenu = _groupMenu;
@synthesize groupId = _groupId;
@end

// --- Organization ---
@implementation Organization
@synthesize Id = _Id;
@synthesize Name = _Name;
@synthesize QortexURL = _QortexURL;
@synthesize Summary = _Summary;
@synthesize LogoURL = _LogoURL;
@synthesize Address = _Address;
@synthesize Phone = _Phone;
@synthesize Website = _Website;
@synthesize Domains = _Domains;
@synthesize RestrictSubscriptionMail = _RestrictSubscriptionMail;
@end

// --- Blog ---
@implementation Blog
@synthesize Title = _Title;
@synthesize Description = _Description;
@synthesize SideContent = _SideContent;
@end

// --- EmbedUser ---
@implementation EmbedUser
@synthesize Id = _Id;
@synthesize Email = _Email;
@synthesize Name = _Name;
@synthesize Title = _Title;
@synthesize Avatar16 = _Avatar16;
@synthesize Avatar32 = _Avatar32;
@synthesize JID = _JID;
@synthesize Timezone = _Timezone;
@synthesize IsSuperUser = _IsSuperUser;
@synthesize IsShare = _IsShare;
@synthesize OrganizationId = _OrganizationId;
@synthesize OriginalOrgId = _OriginalOrgId;
@synthesize ProfileURL = _ProfileURL;
@end

// --- PanelStatus ---
@implementation PanelStatus
@synthesize AsideGroupsCollapse = _AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse = _AsideOtherGroupsCollapse;
@synthesize HasToDo = _HasToDo;
@synthesize HasDraft = _HasDraft;
@synthesize HasWatchList = _HasWatchList;
@synthesize HasChat = _HasChat;
@synthesize ShowMarkUnreadThreshold = _ShowMarkUnreadThreshold;
@end

// --- GroupSelectorItem ---
@implementation GroupSelectorItem
@synthesize Id = _Id;
@synthesize Name = _Name;
@synthesize IsSelected = _IsSelected;
@end

// --- Attachment ---
@implementation Attachment
@synthesize Id = _Id;
@synthesize OwnerId = _OwnerId;
@synthesize Category = _Category;
@synthesize Filename = _Filename;
@synthesize ShortFilename = _ShortFilename;
@synthesize ContentType = _ContentType;
@synthesize ContentId = _ContentId;
@synthesize MD5 = _MD5;
@synthesize ContentLength = _ContentLength;
@synthesize Error = _Error;
@synthesize GroupId = _GroupId;
@synthesize UploadTime = _UploadTime;
@synthesize Width = _Width;
@synthesize Height = _Height;
@synthesize URL = _URL;
@synthesize ImageIconURL = _ImageIconURL;
@synthesize FileIconURL = _FileIconURL;
@synthesize HumanSize = _HumanSize;
@synthesize IsImage = _IsImage;
@synthesize FileKind = _FileKind;
@end

// --- LinkedEntry ---
@implementation LinkedEntry
@synthesize Id = _Id;
@synthesize EType = _EType;
@synthesize Title = _Title;
@synthesize GroupId = _GroupId;
@synthesize AuthorId = _AuthorId;
@synthesize IsRoot = _IsRoot;
@synthesize RootId = _RootId;
@synthesize RootEntryTitle = _RootEntryTitle;
@synthesize Link = _Link;
@end

// --- Newsletter ---
@implementation Newsletter
@synthesize Email = _Email;
@end

// --- OrgSettings ---
@implementation OrgSettings
@synthesize AllowUsersCreateGroups = _AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople = _AllowUsersInvitePeople;
@end

// --- GroupCount ---
@implementation GroupCount
@synthesize GroupId = _GroupId;
@synthesize UnreadCount = _UnreadCount;
@end

// --- GroupHeaderItem ---
@implementation GroupHeaderItem
@synthesize HasToFollow = _HasToFollow;
@synthesize IsFollowing = _IsFollowing;
@synthesize IsManaging = _IsManaging;
@synthesize HasFileTab = _HasFileTab;
@synthesize HasToDoTab = _HasToDoTab;
@synthesize IsSystemMessage = _IsSystemMessage;
@synthesize SelectedGroup = _SelectedGroup;
@end

// --- InlineHelp ---
@implementation InlineHelp
@synthesize WhatFeed = _WhatFeed;
@synthesize WhatGroup = _WhatGroup;
@synthesize WhatNext = _WhatNext;
@synthesize WhatChats = _WhatChats;
@synthesize WhatWatchList = _WhatWatchList;
@synthesize AboutTodos = _AboutTodos;
@synthesize GettingOut = _GettingOut;
@synthesize InviteOthersURL = _InviteOthersURL;
@synthesize WhatNextURL = _WhatNextURL;
@synthesize WhatChatsURL = _WhatChatsURL;
@end

// --- EmailChanger ---
@implementation EmailChanger
@synthesize Token = _Token;
@synthesize Email = _Email;
@end

// --- HelpInfo ---
@implementation HelpInfo
@synthesize FirstName = _FirstName;
@synthesize LastName = _LastName;
@synthesize CompanyName = _CompanyName;
@synthesize CompanySize = _CompanySize;
@synthesize Email = _Email;
@synthesize Phone = _Phone;
@synthesize Country = _Country;
@synthesize City = _City;
@synthesize HelpContent = _HelpContent;
@end

// --- CanNotBlankError ---
@implementation CanNotBlankError
@synthesize Field = _Field;
@synthesize field = _field;
@synthesize this = _this;
@end

// --- EntryInput ---
@implementation EntryInput
@synthesize Id = _Id;
@synthesize EType = _EType;
@synthesize Title = _Title;
@synthesize Slug = _Slug;
@synthesize Content = _Content;
@synthesize GroupId = _GroupId;
@synthesize IsToGroup = _IsToGroup;
@synthesize ToUserIds = _ToUserIds;
@synthesize MentionedUserIds = _MentionedUserIds;
@synthesize IsPublished = _IsPublished;
@synthesize IsAcknowledgement = _IsAcknowledgement;
@synthesize TaskRequireType = _TaskRequireType;
@synthesize TaskDue = _TaskDue;
@synthesize RootId = _RootId;
@synthesize IsCommentAcknowledgement = _IsCommentAcknowledgement;
@synthesize BaseOnEntryId = _BaseOnEntryId;
@synthesize NewVersion = _NewVersion;
@synthesize OldGroupId = _OldGroupId;
@synthesize KnowledgeBase = _KnowledgeBase;
@synthesize AnyoneCanEdit = _AnyoneCanEdit;
@synthesize Presentation = _Presentation;
@synthesize IsFromEmail = _IsFromEmail;
@synthesize Email = _Email;
@synthesize Name = _Name;
@end

// --- BroadcastInput ---
@implementation BroadcastInput
@synthesize Id = _Id;
@synthesize Title = _Title;
@synthesize Content = _Content;
@synthesize ToOrgIds = _ToOrgIds;
@synthesize BroadcastType = _BroadcastType;
@synthesize RootId = _RootId;
@end

// --- GroupInput ---
@implementation GroupInput
@synthesize Id = _Id;
@synthesize Name = _Name;
@synthesize Description = _Description;
@synthesize Type = _Type;
@synthesize LogoURL = _LogoURL;
@synthesize IconName = _IconName;
@synthesize Slug = _Slug;
@synthesize IsPrivate = _IsPrivate;
@synthesize IsShared = _IsShared;
@synthesize GroupOwners = _GroupOwners;
@synthesize InvitedOrgIds = _InvitedOrgIds;
@synthesize ActionOrgId = _ActionOrgId;
@end

// --- OrgSettingsInput ---
@implementation OrgSettingsInput
@synthesize AllowUsersCreateGroups = _AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople = _AllowUsersInvitePeople;
@end

// --- OrganizationInput ---
@implementation OrganizationInput
@synthesize Id = _Id;
@synthesize OType = _OType;
@synthesize Name = _Name;
@synthesize Summary = _Summary;
@synthesize Address = _Address;
@synthesize Phone = _Phone;
@synthesize Website = _Website;
@synthesize Domain = _Domain;
@synthesize Domains = _Domains;
@synthesize RestrictSubscriptionMail = _RestrictSubscriptionMail;
@synthesize AuthorId = _AuthorId;
@synthesize MemberIds = _MemberIds;
@synthesize GroupIds = _GroupIds;
@synthesize QortexURL = _QortexURL;
@synthesize LogoURL = _LogoURL;
@synthesize ChatToken = _ChatToken;
@synthesize RegistrationMode = _RegistrationMode;
@end

// --- LikeInput ---
@implementation LikeInput
@synthesize EntryId = _EntryId;
@synthesize GroupId = _GroupId;
@synthesize Like = _Like;
@end

// --- PreferencesInput ---
@implementation PreferencesInput
@synthesize Timezone = _Timezone;
@synthesize TimezoneOffset = _TimezoneOffset;
@synthesize PreferFullName = _PreferFullName;
@synthesize EnterForNewLine = _EnterForNewLine;
@synthesize AsideGroupsCollapse = _AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse = _AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold = _ShowMarkUnreadThreshold;
@synthesize AdminModeOn = _AdminModeOn;
@synthesize PreferMarkdown = _PreferMarkdown;
@synthesize AutoFollowPublicGroup = _AutoFollowPublicGroup;
@end

// --- MemberAccountInput ---
@implementation MemberAccountInput
@synthesize FirstName = _FirstName;
@synthesize LastName = _LastName;
@synthesize AvatarURL = _AvatarURL;
@end

// --- NewsletterInput ---
@implementation NewsletterInput
@synthesize Email = _Email;
@end

// --- ShareChatInput ---
@implementation ShareChatInput
@synthesize Title = _Title;
@synthesize Content = _Content;
@synthesize BasedConvId = _BasedConvId;
@synthesize BaseOnEntryId = _BaseOnEntryId;
@synthesize GroupId = _GroupId;
@end

// --- HelpInput ---
@implementation HelpInput
@synthesize FirstName = _FirstName;
@synthesize LastName = _LastName;
@synthesize CompanyName = _CompanyName;
@synthesize CompanySize = _CompanySize;
@synthesize Email = _Email;
@synthesize Phone = _Phone;
@synthesize Country = _Country;
@synthesize City = _City;
@synthesize HelpContent = _HelpContent;
@end

// --- UserProfileInput ---
@implementation UserProfileInput
@synthesize Summary = _Summary;
@synthesize Title = _Title;
@synthesize Department = _Department;
@synthesize Location = _Location;
@synthesize Expertise = _Expertise;
@synthesize Interests = _Interests;
@synthesize BirthMonth = _BirthMonth;
@synthesize BirthDay = _BirthDay;
@synthesize WorkPhone = _WorkPhone;
@synthesize Mobile = _Mobile;
@synthesize Twitter = _Twitter;
@synthesize Skype = _Skype;
@synthesize Facebook = _Facebook;
@synthesize OtherWebsites = _OtherWebsites;
@end

// --- DraftReply ---
@implementation DraftReply
@synthesize Method = _Method;
@synthesize Success = _Success;
@synthesize IsManual = _IsManual;
@synthesize Message = _Message;
@end

// --- Preferences ---
@implementation Preferences
@synthesize Timezone = _Timezone;
@synthesize TimezoneOffset = _TimezoneOffset;
@synthesize PreferFullName = _PreferFullName;
@synthesize EnterForNewLine = _EnterForNewLine;
@synthesize AsideGroupsCollapse = _AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse = _AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold = _ShowMarkUnreadThreshold;
@synthesize AdminModeOn = _AdminModeOn;
@synthesize PreferMarkdown = _PreferMarkdown;
@synthesize AutoFollowPublicGroup = _AutoFollowPublicGroup;
@end

// --- EmbedOrg ---
@implementation EmbedOrg
@synthesize Id = _Id;
@synthesize Name = _Name;
@synthesize LogoURL = _LogoURL;
@synthesize NoNeedToShare = _NoNeedToShare;
@end

// --- BlogEntry ---
@implementation BlogEntry
@synthesize Id = _Id;
@synthesize Title = _Title;
@synthesize Slug = _Slug;
@synthesize CreatedAt = _CreatedAt;
@synthesize UpdatedAt = _UpdatedAt;
@synthesize Permalink = _Permalink;
@synthesize CreateCommentURL = _CreateCommentURL;
@synthesize HtmlContent = _HtmlContent;
@synthesize Author = _Author;
@synthesize Comments = _Comments;
@end

// --- GroupUsers ---
@implementation GroupUsers
@synthesize GroupId = _GroupId;
@synthesize EmbedUsers = _EmbedUsers;
@end

// --- MyCount ---
@implementation MyCount
@synthesize UserId = _UserId;
@synthesize FollowedUnreadCount = _FollowedUnreadCount;
@synthesize NotificationUnreadCount = _NotificationUnreadCount;
@synthesize ActiveTasksCount = _ActiveTasksCount;
@synthesize GroupCounts = _GroupCounts;
@end

// --- AvailableUser ---
@implementation AvailableUser
@synthesize Method = _Method;
@synthesize TheUser = _TheUser;
@synthesize embedUser = _embedUser;
@end

// --- Group ---
@implementation Group
@synthesize Id = _Id;
@synthesize Name = _Name;
@synthesize Description = _Description;
@synthesize GType = _GType;
@synthesize LogoURL = _LogoURL;
@synthesize IconName = _IconName;
@synthesize Link = _Link;
@synthesize Slug = _Slug;
@synthesize Author = _Author;
@synthesize IsAdmin = _IsAdmin;
@synthesize IsPrivate = _IsPrivate;
@synthesize Editable = _Editable;
@synthesize Managable = _Managable;
@synthesize FollowedByMe = _FollowedByMe;
@synthesize AdministratedByMe = _AdministratedByMe;
@synthesize IsShared = _IsShared;
@synthesize IsDefaultLogoURL = _IsDefaultLogoURL;
@synthesize HostOrgName = _HostOrgName;
@synthesize IsDispayHostOrgName = _IsDispayHostOrgName;
@synthesize EntriesCount = _EntriesCount;
@synthesize FollowersCount = _FollowersCount;
@synthesize IsAnnoucement = _IsAnnoucement;
@synthesize GroupOwners = _GroupOwners;
@end

// --- GroupSelector ---
@implementation GroupSelector
@synthesize Header = _Header;
@synthesize SelectedGroupId = _SelectedGroupId;
@synthesize SysMessage = _SysMessage;
@synthesize FollowingGroups = _FollowingGroups;
@synthesize UnFollowingGroups = _UnFollowingGroups;
@end

// --- Task ---
@implementation Task
@synthesize IsTaskOwner = _IsTaskOwner;
@synthesize IsTaskAssignee = _IsTaskAssignee;
@synthesize IsOthers = _IsOthers;
@synthesize IsCurrentUserDone = _IsCurrentUserDone;
@synthesize IsAcknowledgement = _IsAcknowledgement;
@synthesize IsTodoForOne = _IsTodoForOne;
@synthesize IsTodoForAll = _IsTodoForAll;
@synthesize IsCompleted = _IsCompleted;
@synthesize IsClosed = _IsClosed;
@synthesize IsDueToday = _IsDueToday;
@synthesize IsOverDue = _IsOverDue;
@synthesize CreatedAt = _CreatedAt;
@synthesize Due = _Due;
@synthesize CompletedAt = _CompletedAt;
@synthesize LocalCreatedDate = _LocalCreatedDate;
@synthesize LocalDue = _LocalDue;
@synthesize LocalDueShortDate = _LocalDueShortDate;
@synthesize DueInputValue = _DueInputValue;
@synthesize TotalUsersCount = _TotalUsersCount;
@synthesize CompletedUsersCount = _CompletedUsersCount;
@synthesize PendingUsersCount = _PendingUsersCount;
@synthesize Owner = _Owner;
@synthesize ToUsers = _ToUsers;
@synthesize PendingUsers = _PendingUsers;
@synthesize CompletedUsers = _CompletedUsers;
@synthesize ColorCssClass = _ColorCssClass;
@synthesize TaskBarHtml = _TaskBarHtml;
@end

// --- EntryVersion ---
@implementation EntryVersion
@synthesize Id = _Id;
@synthesize GroupId = _GroupId;
@synthesize UpdatedAt = _UpdatedAt;
@synthesize LocalUpdatedAt = _LocalUpdatedAt;
@synthesize UpdatedAtUnixNano = _UpdatedAtUnixNano;
@synthesize CurrentVersionEditor = _CurrentVersionEditor;
@synthesize IsNewVersion = _IsNewVersion;
@end

// --- Message ---
@implementation Message
@synthesize Id = _Id;
@synthesize ConversationId = _ConversationId;
@synthesize UserId = _UserId;
@synthesize Content = _Content;
@synthesize HtmlContent = _HtmlContent;
@synthesize CreatedAt = _CreatedAt;
@synthesize EmbedUser = _EmbedUser;
@synthesize ShowUser = _ShowUser;
@synthesize HighlightedContent = _HighlightedContent;
@end

// --- Invitation ---
@implementation Invitation
@synthesize Email = _Email;
@synthesize Token = _Token;
@synthesize SentAgo = _SentAgo;
@synthesize ByUser = _ByUser;
@end

// --- EmbedEntry ---
@implementation EmbedEntry
@synthesize Id = _Id;
@synthesize GroupId = _GroupId;
@synthesize Title = _Title;
@synthesize HtmlTitle = _HtmlTitle;
@synthesize EType = _EType;
@synthesize Author = _Author;
@synthesize ToUsers = _ToUsers;
@synthesize Link = _Link;
@end

// --- AbandonUserInfo ---
@implementation AbandonUserInfo
@synthesize CurrentDisabledFromOrg = _CurrentDisabledFromOrg;
@synthesize CurrentDeletedFromOrg = _CurrentDeletedFromOrg;
@synthesize AvailableOrgs = _AvailableOrgs;
@synthesize DisabledFromOrgs = _DisabledFromOrgs;
@synthesize DeletedFromOrgs = _DeletedFromOrgs;
@end

// --- Conversation ---
@implementation Conversation
@synthesize Id = _Id;
@synthesize Title = _Title;
@synthesize UserIds = _UserIds;
@synthesize Participants = _Participants;
@synthesize CreatedAt = _CreatedAt;
@synthesize EndedAt = _EndedAt;
@synthesize LocalHumanCreatedAt = _LocalHumanCreatedAt;
@synthesize Topic = _Topic;
@synthesize Private = _Private;
@synthesize IsClose = _IsClose;
@synthesize IsShared = _IsShared;
@synthesize SharedMessageIds = _SharedMessageIds;
@synthesize MessagesCount = _MessagesCount;
@synthesize Messages = _Messages;
@end

// --- NotificationItem ---
@implementation NotificationItem
@synthesize Id = _Id;
@synthesize GroupId = _GroupId;
@synthesize ToUser = _ToUser;
@synthesize ForEntry = _ForEntry;
@synthesize FromUser = _FromUser;
@synthesize FromOrg = _FromOrg;
@synthesize CausedByEntry = _CausedByEntry;
@synthesize NotifiedAt = _NotifiedAt;
@synthesize ReadAt = _ReadAt;
@synthesize Readed = _Readed;
@synthesize Type = _Type;
@synthesize Link = _Link;
@synthesize SharingRequestToEmail = _SharingRequestToEmail;
@end

// --- CountNotification ---
@implementation CountNotification
@synthesize Method = _Method;
@synthesize GroupId = _GroupId;
@synthesize NewEntry = _NewEntry;
@synthesize EntryId = _EntryId;
@synthesize DelType = _DelType;
@synthesize MyCount = _MyCount;
@synthesize NewMessageNumber = _NewMessageNumber;
@end

// --- SharingInvitationItem ---
@implementation SharingInvitationItem
@synthesize FromOrg = _FromOrg;
@synthesize FromUserId = _FromUserId;
@synthesize SharedGroup = _SharedGroup;
@synthesize IsNewAccount = _IsNewAccount;
@synthesize Email = _Email;
@synthesize Token = _Token;
@synthesize JoinedOrgs = _JoinedOrgs;
@synthesize IsAccepted = _IsAccepted;
@synthesize IsRejected = _IsRejected;
@synthesize IsPending = _IsPending;
@synthesize IsForwarded = _IsForwarded;
@synthesize IsCanceled = _IsCanceled;
@synthesize IsStopped = _IsStopped;
@synthesize PendingDuration = _PendingDuration;
@synthesize ToOrgName = _ToOrgName;
@synthesize ToOrgId = _ToOrgId;
@end

// --- User ---
@implementation User
@synthesize Id = _Id;
@synthesize Email = _Email;
@synthesize Firstame = _Firstame;
@synthesize LastName = _LastName;
@synthesize Name = _Name;
@synthesize Title = _Title;
@synthesize Avatar = _Avatar;
@synthesize JID = _JID;
@synthesize Timezone = _Timezone;
@synthesize IsSuperUser = _IsSuperUser;
@synthesize IsSharedUser = _IsSharedUser;
@synthesize OrgId = _OrgId;
@synthesize OriginalOrgId = _OriginalOrgId;
@synthesize PrefixURL = _PrefixURL;
@synthesize ProfileURL = _ProfileURL;
@synthesize IsLoggedInUser = _IsLoggedInUser;
@synthesize IsAvailable = _IsAvailable;
@synthesize IsDisabled = _IsDisabled;
@synthesize IsDeleted = _IsDeleted;
@synthesize FromSharedGroup = _FromSharedGroup;
@synthesize FromOrganizationName = _FromOrganizationName;
@synthesize Editable = _Editable;
@synthesize Followable = _Followable;
@synthesize FollowedByMe = _FollowedByMe;
@synthesize FollowingTheGroup = _FollowingTheGroup;
@synthesize Department = _Department;
@synthesize Location = _Location;
@synthesize FollowingGroups = _FollowingGroups;
@synthesize Preferences = _Preferences;
@end

// --- Request ---
@implementation Request
@synthesize CurrentPrefixURL = _CurrentPrefixURL;
@synthesize Info = _Info;
@synthesize ActionButton = _ActionButton;
@synthesize FromOrg = _FromOrg;
@synthesize ToOrg = _ToOrg;
@synthesize SharedGroup = _SharedGroup;
@synthesize SharedOrgIdHex = _SharedOrgIdHex;
@synthesize FromUserIdHex = _FromUserIdHex;
@synthesize SharedInvitee = _SharedInvitee;
@synthesize SharedInviter = _SharedInviter;
@synthesize SharedResponsor = _SharedResponsor;
@synthesize ToEmail = _ToEmail;
@synthesize State = _State;
@end

// --- TaskState ---
@implementation TaskState
@synthesize Method = _Method;
@synthesize TaskBar = _TaskBar;
@synthesize EntryId = _EntryId;
@synthesize MyCount = _MyCount;
@end

// --- Entry ---
@implementation Entry
@synthesize Id = _Id;
@synthesize EType = _EType;
@synthesize Title = _Title;
@synthesize Slug = _Slug;
@synthesize Content = _Content;
@synthesize TypeTitle = _TypeTitle;
@synthesize RootId = _RootId;
@synthesize GroupId = _GroupId;
@synthesize AuthorId = _AuthorId;
@synthesize CreatedAt = _CreatedAt;
@synthesize UpdatedAt = _UpdatedAt;
@synthesize BumpedUpAt = _BumpedUpAt;
@synthesize AllAttachmentsURL = _AllAttachmentsURL;
@synthesize Permalink = _Permalink;
@synthesize IconName = _IconName;
@synthesize LocalHumanCreatedAt = _LocalHumanCreatedAt;
@synthesize LocalHumanUpdatedAt = _LocalHumanUpdatedAt;
@synthesize WholeLastUpdateAtAgo = _WholeLastUpdateAtAgo;
@synthesize LastUpdateAtAgo = _LastUpdateAtAgo;
@synthesize MentionedUserIds = _MentionedUserIds;
@synthesize DomainURL = _DomainURL;
@synthesize UpdatedAtUnixNano = _UpdatedAtUnixNano;
@synthesize HtmlTitle = _HtmlTitle;
@synthesize HtmlContent = _HtmlContent;
@synthesize HtmlContentPart = _HtmlContentPart;
@synthesize TaskHtmlContentPart = _TaskHtmlContentPart;
@synthesize WatchlistHtml = _WatchlistHtml;
@synthesize ToUsersHtml = _ToUsersHtml;
@synthesize LikedByUsersHtml = _LikedByUsersHtml;
@synthesize NotifyOptionsHtml = _NotifyOptionsHtml;
@synthesize Link = _Link;
@synthesize UploadURL = _UploadURL;
@synthesize IsShared = _IsShared;
@synthesize IsPublished = _IsPublished;
@synthesize IsCanPublish = _IsCanPublish;
@synthesize IsSystemMessage = _IsSystemMessage;
@synthesize SystemMessageType = _SystemMessageType;
@synthesize BroadcastType = _BroadcastType;
@synthesize IsBroadcast = _IsBroadcast;
@synthesize IsBroadcastTypeToAllAdmins = _IsBroadcastTypeToAllAdmins;
@synthesize IsBroadcastTypeToAllUsers = _IsBroadcastTypeToAllUsers;
@synthesize IsBroadcastTypeToSomeOrgs = _IsBroadcastTypeToSomeOrgs;
@synthesize IsFromSuperOrg = _IsFromSuperOrg;
@synthesize IsFeedback = _IsFeedback;
@synthesize FromOrg = _FromOrg;
@synthesize ToOrgs = _ToOrgs;
@synthesize ToOrgsHtml = _ToOrgsHtml;
@synthesize IsRequest = _IsRequest;
@synthesize Request = _Request;
@synthesize VisibleForSuperUserInSuperOrg = _VisibleForSuperUserInSuperOrg;
@synthesize VisibleForSuperOrg = _VisibleForSuperOrg;
@synthesize IsKnowledgeBase = _IsKnowledgeBase;
@synthesize IsPost = _IsPost;
@synthesize IsComment = _IsComment;
@synthesize IsTask = _IsTask;
@synthesize IsChat = _IsChat;
@synthesize IsTaskToDo = _IsTaskToDo;
@synthesize IsTaskAck = _IsTaskAck;
@synthesize IsInWatchList = _IsInWatchList;
@synthesize IsToGroup = _IsToGroup;
@synthesize CurrentUserCanEdit = _CurrentUserCanEdit;
@synthesize CanEdit = _CanEdit;
@synthesize CanReply = _CanReply;
@synthesize ManagerCanEdit = _ManagerCanEdit;
@synthesize LikedByMe = _LikedByMe;
@synthesize HasInlineTask = _HasInlineTask;
@synthesize TaskIsCompleted = _TaskIsCompleted;
@synthesize IsRoot = _IsRoot;
@synthesize IsUnread = _IsUnread;
@synthesize IsUpdated = _IsUpdated;
@synthesize IsLastVersion = _IsLastVersion;
@synthesize Presentation = _Presentation;
@synthesize AnyoneCanEdit = _AnyoneCanEdit;
@synthesize IsInGroup = _IsInGroup;
@synthesize IsFromEmail = _IsFromEmail;
@synthesize AllAttachmentsCount = _AllAttachmentsCount;
@synthesize CommentsCount = _CommentsCount;
@synthesize AllLikesCount = _AllLikesCount;
@synthesize VersionCount = _VersionCount;
@synthesize Author = _Author;
@synthesize CurrentVersionEditor = _CurrentVersionEditor;
@synthesize Group = _Group;
@synthesize Task = _Task;
@synthesize Conversation = _Conversation;
@synthesize LinkedEntries = _LinkedEntries;
@synthesize Versions = _Versions;
@synthesize ToUsers = _ToUsers;
@synthesize MentionedUsers = _MentionedUsers;
@synthesize LikedByUsers = _LikedByUsers;
@synthesize Attachments = _Attachments;
@synthesize FirstPicture = _FirstPicture;
@synthesize Comments = _Comments;
@synthesize ExternalComments = _ExternalComments;
@synthesize CurrentVersionComments = _CurrentVersionComments;
@synthesize OtherVersionsComments = _OtherVersionsComments;
@synthesize NewComment = _NewComment;
@synthesize NewEntry = _NewEntry;
@synthesize GroupSlector = _GroupSlector;
@end

// --- MyNotifications ---
@implementation MyNotifications
@synthesize NotificationItems = _NotificationItems;
@synthesize HasMore = _HasMore;
@synthesize LatestNotifyTime = _LatestNotifyTime;
@end

// --- MyChats ---
@implementation MyChats
@synthesize ChatEntries = _ChatEntries;
@synthesize HasMore = _HasMore;
@synthesize LatestCreateTime = _LatestCreateTime;
@synthesize WhatChats = _WhatChats;
@synthesize PrefixURL = _PrefixURL;
@end

// --- WatchItem ---
@implementation WatchItem
@synthesize AttachCnt = _AttachCnt;
@synthesize CommentCnt = _CommentCnt;
@synthesize LikeCnt = _LikeCnt;
@synthesize AttachCntStr = _AttachCntStr;
@synthesize CommentCntStr = _CommentCntStr;
@synthesize LikeCntStr = _LikeCntStr;
@synthesize WatchTime = _WatchTime;
@synthesize WatchEntry = _WatchEntry;
@end

// --- MyTask ---
@implementation MyTask
@synthesize TasksForMe = _TasksForMe;
@synthesize MyCreatedTasks = _MyCreatedTasks;
@synthesize AboutTodos = _AboutTodos;
@end

// --- DraftList ---
@implementation DraftList
@synthesize DraftItems = _DraftItems;
@end

// --- WatchList ---
@implementation WatchList
@synthesize Items = _Items;
@synthesize WhatWatchList = _WhatWatchList;
@end


// === Interfaces ===


@implementation NoAuthUserService : NSObject


// --- CancelChangingEmail ---
- (NoAuthUserServiceCancelChangingEmailResults *) CancelChangingEmail:(NSString *)token {
	
	NoAuthUserServiceCancelChangingEmailResults *results = [[NoAuthUserServiceCancelChangingEmailResults alloc] init];
	NoAuthUserServiceCancelChangingEmailParams *params = [[NoAuthUserServiceCancelChangingEmailParams alloc] init];
	[params setToken:token];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ChangeEmail ---
- (NoAuthUserServiceChangeEmailResults *) ChangeEmail:(NSString *)token {
	
	NoAuthUserServiceChangeEmailResults *results = [[NoAuthUserServiceChangeEmailResults alloc] init];
	NoAuthUserServiceChangeEmailParams *params = [[NoAuthUserServiceChangeEmailParams alloc] init];
	[params setToken:token];
	
	//[DoRequest:params results:results];
	return results;
}

// --- PrepareChangeEmail ---
- (NoAuthUserServicePrepareChangeEmailResults *) PrepareChangeEmail:(NSString *)memberId newEmail:(NSString *)newEmail {
	
	NoAuthUserServicePrepareChangeEmailResults *results = [[NoAuthUserServicePrepareChangeEmailResults alloc] init];
	NoAuthUserServicePrepareChangeEmailParams *params = [[NoAuthUserServicePrepareChangeEmailParams alloc] init];
	[params setMemberId:memberId];
	[params setNewEmail:newEmail];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetSharingInviation ---
- (NoAuthUserServiceGetSharingInviationResults *) GetSharingInviation:(NSString *)sharingInviationToken memberId:(NSString *)memberId {
	
	NoAuthUserServiceGetSharingInviationResults *results = [[NoAuthUserServiceGetSharingInviationResults alloc] init];
	NoAuthUserServiceGetSharingInviationParams *params = [[NoAuthUserServiceGetSharingInviationParams alloc] init];
	[params setSharingInviationToken:sharingInviationToken];
	[params setMemberId:memberId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ChangeEmailToAcceptSharing ---
- (NoAuthUserServiceChangeEmailToAcceptSharingResults *) ChangeEmailToAcceptSharing:(NSString *)token newEmail:(NSString *)newEmail {
	
	NoAuthUserServiceChangeEmailToAcceptSharingResults *results = [[NoAuthUserServiceChangeEmailToAcceptSharingResults alloc] init];
	NoAuthUserServiceChangeEmailToAcceptSharingParams *params = [[NoAuthUserServiceChangeEmailToAcceptSharingParams alloc] init];
	[params setToken:token];
	[params setNewEmail:newEmail];
	
	//[DoRequest:params results:results];
	return results;
}

// --- AskHelp ---
- (NoAuthUserServiceAskHelpResults *) AskHelp:(HelpInput *)input {
	
	NoAuthUserServiceAskHelpResults *results = [[NoAuthUserServiceAskHelpResults alloc] init];
	NoAuthUserServiceAskHelpParams *params = [[NoAuthUserServiceAskHelpParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- BlogEntries ---
- (NoAuthUserServiceBlogEntriesResults *) BlogEntries:(NSString *)doi pageNum:(NSNumber *)pageNum limit:(NSNumber *)limit {
	
	NoAuthUserServiceBlogEntriesResults *results = [[NoAuthUserServiceBlogEntriesResults alloc] init];
	NoAuthUserServiceBlogEntriesParams *params = [[NoAuthUserServiceBlogEntriesParams alloc] init];
	[params setDoi:doi];
	[params setPageNum:pageNum];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- BlogEntryBySlug ---
- (NoAuthUserServiceBlogEntryBySlugResults *) BlogEntryBySlug:(NSString *)doi slug:(NSString *)slug {
	
	NoAuthUserServiceBlogEntryBySlugResults *results = [[NoAuthUserServiceBlogEntryBySlugResults alloc] init];
	NoAuthUserServiceBlogEntryBySlugParams *params = [[NoAuthUserServiceBlogEntryBySlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateExternalComment ---
- (NoAuthUserServiceCreateExternalCommentResults *) CreateExternalComment:(NSString *)doi input:(EntryInput *)input {
	
	NoAuthUserServiceCreateExternalCommentResults *results = [[NoAuthUserServiceCreateExternalCommentResults alloc] init];
	NoAuthUserServiceCreateExternalCommentParams *params = [[NoAuthUserServiceCreateExternalCommentParams alloc] init];
	[params setDoi:doi];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CheckSlug ---
- (NoAuthUserServiceCheckSlugResults *) CheckSlug:(NSString *)doi slug:(NSString *)slug {
	
	NoAuthUserServiceCheckSlugResults *results = [[NoAuthUserServiceCheckSlugResults alloc] init];
	NoAuthUserServiceCheckSlugParams *params = [[NoAuthUserServiceCheckSlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateNewsletter ---
- (NoAuthUserServiceCreateNewsletterResults *) CreateNewsletter:(NewsletterInput *)input {
	
	NoAuthUserServiceCreateNewsletterResults *results = [[NoAuthUserServiceCreateNewsletterResults alloc] init];
	NoAuthUserServiceCreateNewsletterParams *params = [[NoAuthUserServiceCreateNewsletterParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}
@end

@implementation AuthMemberService : NSObject


// --- GetAbandonUserInfo ---
- (AuthMemberServiceGetAbandonUserInfoResults *) GetAbandonUserInfo:(NSString *)organizationId memberId:(NSString *)memberId {
	
	AuthMemberServiceGetAbandonUserInfoResults *results = [[AuthMemberServiceGetAbandonUserInfoResults alloc] init];
	AuthMemberServiceGetAbandonUserInfoParams *params = [[AuthMemberServiceGetAbandonUserInfoParams alloc] init];
	[params setOrganizationId:organizationId];
	[params setMemberId:memberId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- SwitchOrganization ---
- (AuthMemberServiceSwitchOrganizationResults *) SwitchOrganization:(NSString *)orgId {
	
	AuthMemberServiceSwitchOrganizationResults *results = [[AuthMemberServiceSwitchOrganizationResults alloc] init];
	AuthMemberServiceSwitchOrganizationParams *params = [[AuthMemberServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetSharingInviationByToken ---
- (AuthMemberServiceGetSharingInviationByTokenResults *) GetSharingInviationByToken:(NSString *)sharingInviationToken {
	
	AuthMemberServiceGetSharingInviationByTokenResults *results = [[AuthMemberServiceGetSharingInviationByTokenResults alloc] init];
	AuthMemberServiceGetSharingInviationByTokenParams *params = [[AuthMemberServiceGetSharingInviationByTokenParams alloc] init];
	[params setSharingInviationToken:sharingInviationToken];
	
	//[DoRequest:params results:results];
	return results;
}

// --- RejectSharingBeforeForwarding ---
- (AuthMemberServiceRejectSharingBeforeForwardingResults *) RejectSharingBeforeForwarding:(NSString *)groupId email:(NSString *)email {
	
	AuthMemberServiceRejectSharingBeforeForwardingResults *results = [[AuthMemberServiceRejectSharingBeforeForwardingResults alloc] init];
	AuthMemberServiceRejectSharingBeforeForwardingParams *params = [[AuthMemberServiceRejectSharingBeforeForwardingParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ResponseSharingRequest ---
- (AuthMemberServiceResponseSharingRequestResults *) ResponseSharingRequest:(NSString *)token fromOrgId:(NSString *)fromOrgId fromUserId:(NSString *)fromUserId forSharingOrgId:(NSString *)forSharingOrgId groupId:(NSString *)groupId {
	
	AuthMemberServiceResponseSharingRequestResults *results = [[AuthMemberServiceResponseSharingRequestResults alloc] init];
	AuthMemberServiceResponseSharingRequestParams *params = [[AuthMemberServiceResponseSharingRequestParams alloc] init];
	[params setToken:token];
	[params setFromOrgId:fromOrgId];
	[params setFromUserId:fromUserId];
	[params setForSharingOrgId:forSharingOrgId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}
@end

@implementation AuthUserService : NSObject

@synthesize Session = _Session;


// --- NewEntry ---
- (AuthUserServiceNewEntryResults *) NewEntry:(NSString *)groupId {
	
	AuthUserServiceNewEntryResults *results = [[AuthUserServiceNewEntryResults alloc] init];
	AuthUserServiceNewEntryParams *params = [[AuthUserServiceNewEntryParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- QortexMessages ---
- (AuthUserServiceQortexMessagesResults *) QortexMessages:(NSString *)messsageType before:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceQortexMessagesResults *results = [[AuthUserServiceQortexMessagesResults alloc] init];
	AuthUserServiceQortexMessagesParams *params = [[AuthUserServiceQortexMessagesParams alloc] init];
	[params setMesssageType:messsageType];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateBroadcast ---
- (AuthUserServiceCreateBroadcastResults *) CreateBroadcast:(BroadcastInput *)input {
	
	AuthUserServiceCreateBroadcastResults *results = [[AuthUserServiceCreateBroadcastResults alloc] init];
	AuthUserServiceCreateBroadcastParams *params = [[AuthUserServiceCreateBroadcastParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateBroadcastComment ---
- (AuthUserServiceCreateBroadcastCommentResults *) CreateBroadcastComment:(BroadcastInput *)input {
	
	AuthUserServiceCreateBroadcastCommentResults *results = [[AuthUserServiceCreateBroadcastCommentResults alloc] init];
	AuthUserServiceCreateBroadcastCommentParams *params = [[AuthUserServiceCreateBroadcastCommentParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetRequest ---
- (AuthUserServiceGetRequestResults *) GetRequest:(NSString *)entryId {
	
	AuthUserServiceGetRequestResults *results = [[AuthUserServiceGetRequestResults alloc] init];
	AuthUserServiceGetRequestParams *params = [[AuthUserServiceGetRequestParams alloc] init];
	[params setEntryId:entryId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- EditBroadcast ---
- (AuthUserServiceEditBroadcastResults *) EditBroadcast:(NSString *)entryId {
	
	AuthUserServiceEditBroadcastResults *results = [[AuthUserServiceEditBroadcastResults alloc] init];
	AuthUserServiceEditBroadcastParams *params = [[AuthUserServiceEditBroadcastParams alloc] init];
	[params setEntryId:entryId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- EditBroadcastComment ---
- (AuthUserServiceEditBroadcastCommentResults *) EditBroadcastComment:(NSString *)entryId {
	
	AuthUserServiceEditBroadcastCommentResults *results = [[AuthUserServiceEditBroadcastCommentResults alloc] init];
	AuthUserServiceEditBroadcastCommentParams *params = [[AuthUserServiceEditBroadcastCommentParams alloc] init];
	[params setEntryId:entryId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateBroadcast ---
- (AuthUserServiceUpdateBroadcastResults *) UpdateBroadcast:(BroadcastInput *)input {
	
	AuthUserServiceUpdateBroadcastResults *results = [[AuthUserServiceUpdateBroadcastResults alloc] init];
	AuthUserServiceUpdateBroadcastParams *params = [[AuthUserServiceUpdateBroadcastParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateBroadcastComment ---
- (AuthUserServiceUpdateBroadcastCommentResults *) UpdateBroadcastComment:(BroadcastInput *)input {
	
	AuthUserServiceUpdateBroadcastCommentResults *results = [[AuthUserServiceUpdateBroadcastCommentResults alloc] init];
	AuthUserServiceUpdateBroadcastCommentParams *params = [[AuthUserServiceUpdateBroadcastCommentParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreatePost ---
- (AuthUserServiceCreatePostResults *) CreatePost:(EntryInput *)input {
	
	AuthUserServiceCreatePostResults *results = [[AuthUserServiceCreatePostResults alloc] init];
	AuthUserServiceCreatePostParams *params = [[AuthUserServiceCreatePostParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateTask ---
- (AuthUserServiceCreateTaskResults *) CreateTask:(EntryInput *)input {
	
	AuthUserServiceCreateTaskResults *results = [[AuthUserServiceCreateTaskResults alloc] init];
	AuthUserServiceCreateTaskParams *params = [[AuthUserServiceCreateTaskParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CloseTask ---
- (AuthUserServiceCloseTaskResults *) CloseTask:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceCloseTaskResults *results = [[AuthUserServiceCloseTaskResults alloc] init];
	AuthUserServiceCloseTaskParams *params = [[AuthUserServiceCloseTaskParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateComment ---
- (AuthUserServiceCreateCommentResults *) CreateComment:(EntryInput *)input {
	
	AuthUserServiceCreateCommentResults *results = [[AuthUserServiceCreateCommentResults alloc] init];
	AuthUserServiceCreateCommentParams *params = [[AuthUserServiceCreateCommentParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetComment ---
- (AuthUserServiceGetCommentResults *) GetComment:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceGetCommentResults *results = [[AuthUserServiceGetCommentResults alloc] init];
	AuthUserServiceGetCommentParams *params = [[AuthUserServiceGetCommentParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateComment ---
- (AuthUserServiceUpdateCommentResults *) UpdateComment:(EntryInput *)input {
	
	AuthUserServiceUpdateCommentResults *results = [[AuthUserServiceUpdateCommentResults alloc] init];
	AuthUserServiceUpdateCommentParams *params = [[AuthUserServiceUpdateCommentParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateEntry ---
- (AuthUserServiceUpdateEntryResults *) UpdateEntry:(EntryInput *)input {
	
	AuthUserServiceUpdateEntryResults *results = [[AuthUserServiceUpdateEntryResults alloc] init];
	AuthUserServiceUpdateEntryParams *params = [[AuthUserServiceUpdateEntryParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetLatestUpdatedEntryIdByTitle ---
- (AuthUserServiceGetLatestUpdatedEntryIdByTitleResults *) GetLatestUpdatedEntryIdByTitle:(NSString *)title groupId:(NSString *)groupId {
	
	AuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results = [[AuthUserServiceGetLatestUpdatedEntryIdByTitleResults alloc] init];
	AuthUserServiceGetLatestUpdatedEntryIdByTitleParams *params = [[AuthUserServiceGetLatestUpdatedEntryIdByTitleParams alloc] init];
	[params setTitle:title];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetEntry ---
- (AuthUserServiceGetEntryResults *) GetEntry:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNano:(NSString *)updateAtUnixNano searchKeyWords:(NSString *)searchKeyWords {
	
	AuthUserServiceGetEntryResults *results = [[AuthUserServiceGetEntryResults alloc] init];
	AuthUserServiceGetEntryParams *params = [[AuthUserServiceGetEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNano:updateAtUnixNano];
	[params setSearchKeyWords:searchKeyWords];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DeleteEntry ---
- (AuthUserServiceDeleteEntryResults *) DeleteEntry:(NSString *)entryId groupId:(NSString *)groupId dType:(NSString *)dType {
	
	AuthUserServiceDeleteEntryResults *results = [[AuthUserServiceDeleteEntryResults alloc] init];
	AuthUserServiceDeleteEntryParams *params = [[AuthUserServiceDeleteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setDType:dType];
	
	//[DoRequest:params results:results];
	return results;
}

// --- EntryAttachments ---
- (AuthUserServiceEntryAttachmentsResults *) EntryAttachments:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceEntryAttachmentsResults *results = [[AuthUserServiceEntryAttachmentsResults alloc] init];
	AuthUserServiceEntryAttachmentsParams *params = [[AuthUserServiceEntryAttachmentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- OtherComments ---
- (AuthUserServiceOtherCommentsResults *) OtherComments:(NSString *)entryId groupId:(NSString *)groupId versionUpdateat:(NSString *)versionUpdateat searchKeyWords:(NSString *)searchKeyWords {
	
	AuthUserServiceOtherCommentsResults *results = [[AuthUserServiceOtherCommentsResults alloc] init];
	AuthUserServiceOtherCommentsParams *params = [[AuthUserServiceOtherCommentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setVersionUpdateat:versionUpdateat];
	[params setSearchKeyWords:searchKeyWords];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GroupEntries ---
- (AuthUserServiceGroupEntriesResults *) GroupEntries:(NSString *)groupId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceGroupEntriesResults *results = [[AuthUserServiceGroupEntriesResults alloc] init];
	AuthUserServiceGroupEntriesParams *params = [[AuthUserServiceGroupEntriesParams alloc] init];
	[params setGroupId:groupId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyFeedEntries ---
- (AuthUserServiceMyFeedEntriesResults *) MyFeedEntries:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceMyFeedEntriesResults *results = [[AuthUserServiceMyFeedEntriesResults alloc] init];
	AuthUserServiceMyFeedEntriesParams *params = [[AuthUserServiceMyFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- NewFeedEntries ---
- (AuthUserServiceNewFeedEntriesResults *) NewFeedEntries:(NSString *)entryType From:(NSString *)From limit:(NSNumber *)limit {
	
	AuthUserServiceNewFeedEntriesResults *results = [[AuthUserServiceNewFeedEntriesResults alloc] init];
	AuthUserServiceNewFeedEntriesParams *params = [[AuthUserServiceNewFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setFrom:From];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyTaskEntries ---
- (AuthUserServiceMyTaskEntriesResults *) MyTaskEntries:(BOOL)active before:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceMyTaskEntriesResults *results = [[AuthUserServiceMyTaskEntriesResults alloc] init];
	AuthUserServiceMyTaskEntriesParams *params = [[AuthUserServiceMyTaskEntriesParams alloc] init];
	[params setActive:active];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UserEntries ---
- (AuthUserServiceUserEntriesResults *) UserEntries:(NSString *)userId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceUserEntriesResults *results = [[AuthUserServiceUserEntriesResults alloc] init];
	AuthUserServiceUserEntriesParams *params = [[AuthUserServiceUserEntriesParams alloc] init];
	[params setUserId:userId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyChatEntries ---
- (AuthUserServiceMyChatEntriesResults *) MyChatEntries:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceMyChatEntriesResults *results = [[AuthUserServiceMyChatEntriesResults alloc] init];
	AuthUserServiceMyChatEntriesParams *params = [[AuthUserServiceMyChatEntriesParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyNotificationItems ---
- (AuthUserServiceMyNotificationItemsResults *) MyNotificationItems:(NSString *)before limit:(NSNumber *)limit {
	
	AuthUserServiceMyNotificationItemsResults *results = [[AuthUserServiceMyNotificationItemsResults alloc] init];
	AuthUserServiceMyNotificationItemsParams *params = [[AuthUserServiceMyNotificationItemsParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MarkAllAsRead ---
- (AuthUserServiceMarkAllAsReadResults *) MarkAllAsRead:(NSString *)groupId {
	
	AuthUserServiceMarkAllAsReadResults *results = [[AuthUserServiceMarkAllAsReadResults alloc] init];
	AuthUserServiceMarkAllAsReadParams *params = [[AuthUserServiceMarkAllAsReadParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetWatchList ---
- (AuthUserServiceGetWatchListResults *) GetWatchList:(NSDate *)before limit:(NSNumber *)limit {
	
	AuthUserServiceGetWatchListResults *results = [[AuthUserServiceGetWatchListResults alloc] init];
	AuthUserServiceGetWatchListParams *params = [[AuthUserServiceGetWatchListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- AddToWatchList ---
- (AuthUserServiceAddToWatchListResults *) AddToWatchList:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceAddToWatchListResults *results = [[AuthUserServiceAddToWatchListResults alloc] init];
	AuthUserServiceAddToWatchListParams *params = [[AuthUserServiceAddToWatchListParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- StopWatching ---
- (AuthUserServiceStopWatchingResults *) StopWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceStopWatchingResults *results = [[AuthUserServiceStopWatchingResults alloc] init];
	AuthUserServiceStopWatchingParams *params = [[AuthUserServiceStopWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ReadWatching ---
- (AuthUserServiceReadWatchingResults *) ReadWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceReadWatchingResults *results = [[AuthUserServiceReadWatchingResults alloc] init];
	AuthUserServiceReadWatchingParams *params = [[AuthUserServiceReadWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateLike ---
- (AuthUserServiceUpdateLikeResults *) UpdateLike:(LikeInput *)input {
	
	AuthUserServiceUpdateLikeResults *results = [[AuthUserServiceUpdateLikeResults alloc] init];
	AuthUserServiceUpdateLikeParams *params = [[AuthUserServiceUpdateLikeParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetDraftList ---
- (AuthUserServiceGetDraftListResults *) GetDraftList:(NSDate *)before limit:(NSNumber *)limit {
	
	AuthUserServiceGetDraftListResults *results = [[AuthUserServiceGetDraftListResults alloc] init];
	AuthUserServiceGetDraftListParams *params = [[AuthUserServiceGetDraftListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetDraft ---
- (AuthUserServiceGetDraftResults *) GetDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceGetDraftResults *results = [[AuthUserServiceGetDraftResults alloc] init];
	AuthUserServiceGetDraftParams *params = [[AuthUserServiceGetDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DeleteDraft ---
- (AuthUserServiceDeleteDraftResults *) DeleteDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceDeleteDraftResults *results = [[AuthUserServiceDeleteDraftResults alloc] init];
	AuthUserServiceDeleteDraftParams *params = [[AuthUserServiceDeleteDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- NewGroup ---
- (AuthUserServiceNewGroupResults *) NewGroup {
	
	AuthUserServiceNewGroupResults *results = [[AuthUserServiceNewGroupResults alloc] init];
	AuthUserServiceNewGroupParams *params = [[AuthUserServiceNewGroupParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetGroup ---
- (AuthUserServiceGetGroupResults *) GetGroup:(NSString *)groupId {
	
	AuthUserServiceGetGroupResults *results = [[AuthUserServiceGetGroupResults alloc] init];
	AuthUserServiceGetGroupParams *params = [[AuthUserServiceGetGroupParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CreateGroup ---
- (AuthUserServiceCreateGroupResults *) CreateGroup:(GroupInput *)input {
	
	AuthUserServiceCreateGroupResults *results = [[AuthUserServiceCreateGroupResults alloc] init];
	AuthUserServiceCreateGroupParams *params = [[AuthUserServiceCreateGroupParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateGroup ---
- (AuthUserServiceUpdateGroupResults *) UpdateGroup:(GroupInput *)input {
	
	AuthUserServiceUpdateGroupResults *results = [[AuthUserServiceUpdateGroupResults alloc] init];
	AuthUserServiceUpdateGroupParams *params = [[AuthUserServiceUpdateGroupParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateGroupLogo ---
- (AuthUserServiceUpdateGroupLogoResults *) UpdateGroupLogo:(NSString *)groupId logoURL:(NSString *)logoURL {
	
	AuthUserServiceUpdateGroupLogoResults *results = [[AuthUserServiceUpdateGroupLogoResults alloc] init];
	AuthUserServiceUpdateGroupLogoParams *params = [[AuthUserServiceUpdateGroupLogoParams alloc] init];
	[params setGroupId:groupId];
	[params setLogoURL:logoURL];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DeleteGroup ---
- (AuthUserServiceDeleteGroupResults *) DeleteGroup:(NSString *)groupId {
	
	AuthUserServiceDeleteGroupResults *results = [[AuthUserServiceDeleteGroupResults alloc] init];
	AuthUserServiceDeleteGroupParams *params = [[AuthUserServiceDeleteGroupParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GroupBySlug ---
- (AuthUserServiceGroupBySlugResults *) GroupBySlug:(NSString *)slug {
	
	AuthUserServiceGroupBySlugResults *results = [[AuthUserServiceGroupBySlugResults alloc] init];
	AuthUserServiceGroupBySlugParams *params = [[AuthUserServiceGroupBySlugParams alloc] init];
	[params setSlug:slug];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetAllGroups ---
- (AuthUserServiceGetAllGroupsResults *) GetAllGroups:(NSString *)keyword {
	
	AuthUserServiceGetAllGroupsResults *results = [[AuthUserServiceGetAllGroupsResults alloc] init];
	AuthUserServiceGetAllGroupsParams *params = [[AuthUserServiceGetAllGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetPublicGroups ---
- (AuthUserServiceGetPublicGroupsResults *) GetPublicGroups:(NSString *)keyword {
	
	AuthUserServiceGetPublicGroupsResults *results = [[AuthUserServiceGetPublicGroupsResults alloc] init];
	AuthUserServiceGetPublicGroupsParams *params = [[AuthUserServiceGetPublicGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	//[DoRequest:params results:results];
	return results;
}

// --- AddUserToGroup ---
- (AuthUserServiceAddUserToGroupResults *) AddUserToGroup:(NSString *)groupId userId:(NSString *)userId {
	
	AuthUserServiceAddUserToGroupResults *results = [[AuthUserServiceAddUserToGroupResults alloc] init];
	AuthUserServiceAddUserToGroupParams *params = [[AuthUserServiceAddUserToGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- RemoveUserFromGroup ---
- (AuthUserServiceRemoveUserFromGroupResults *) RemoveUserFromGroup:(NSString *)groupId userId:(NSString *)userId {
	
	AuthUserServiceRemoveUserFromGroupResults *results = [[AuthUserServiceRemoveUserFromGroupResults alloc] init];
	AuthUserServiceRemoveUserFromGroupParams *params = [[AuthUserServiceRemoveUserFromGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetGroupHeaderItem ---
- (AuthUserServiceGetGroupHeaderItemResults *) GetGroupHeaderItem:(NSString *)groupId {
	
	AuthUserServiceGetGroupHeaderItemResults *results = [[AuthUserServiceGetGroupHeaderItemResults alloc] init];
	AuthUserServiceGetGroupHeaderItemParams *params = [[AuthUserServiceGetGroupHeaderItemParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ClassifyMyGroups ---
- (AuthUserServiceClassifyMyGroupsResults *) ClassifyMyGroups {
	
	AuthUserServiceClassifyMyGroupsResults *results = [[AuthUserServiceClassifyMyGroupsResults alloc] init];
	AuthUserServiceClassifyMyGroupsParams *params = [[AuthUserServiceClassifyMyGroupsParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- OrganizationUsers ---
- (AuthUserServiceOrganizationUsersResults *) OrganizationUsers:(NSString *)query sortKey:(NSString *)sortKey countPerPage:(NSNumber *)countPerPage {
	
	AuthUserServiceOrganizationUsersResults *results = [[AuthUserServiceOrganizationUsersResults alloc] init];
	AuthUserServiceOrganizationUsersParams *params = [[AuthUserServiceOrganizationUsersParams alloc] init];
	[params setQuery:query];
	[params setSortKey:sortKey];
	[params setCountPerPage:countPerPage];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GroupUsers ---
- (AuthUserServiceGroupUsersResults *) GroupUsers:(NSString *)groupId query:(NSString *)query OnlyFollowers:(BOOL)OnlyFollowers sortKey:(NSString *)sortKey countPerPage:(NSNumber *)countPerPage {
	
	AuthUserServiceGroupUsersResults *results = [[AuthUserServiceGroupUsersResults alloc] init];
	AuthUserServiceGroupUsersParams *params = [[AuthUserServiceGroupUsersParams alloc] init];
	[params setGroupId:groupId];
	[params setQuery:query];
	[params setOnlyFollowers:OnlyFollowers];
	[params setSortKey:sortKey];
	[params setCountPerPage:countPerPage];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetUser ---
- (AuthUserServiceGetUserResults *) GetUser:(NSString *)userId {
	
	AuthUserServiceGetUserResults *results = [[AuthUserServiceGetUserResults alloc] init];
	AuthUserServiceGetUserParams *params = [[AuthUserServiceGetUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- EnableUser ---
- (AuthUserServiceEnableUserResults *) EnableUser:(NSString *)userId {
	
	AuthUserServiceEnableUserResults *results = [[AuthUserServiceEnableUserResults alloc] init];
	AuthUserServiceEnableUserParams *params = [[AuthUserServiceEnableUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DisableUser ---
- (AuthUserServiceDisableUserResults *) DisableUser:(NSString *)userId {
	
	AuthUserServiceDisableUserResults *results = [[AuthUserServiceDisableUserResults alloc] init];
	AuthUserServiceDisableUserParams *params = [[AuthUserServiceDisableUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DeleteUser ---
- (AuthUserServiceDeleteUserResults *) DeleteUser:(NSString *)userId {
	
	AuthUserServiceDeleteUserResults *results = [[AuthUserServiceDeleteUserResults alloc] init];
	AuthUserServiceDeleteUserParams *params = [[AuthUserServiceDeleteUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- PromoteToSuperUser ---
- (AuthUserServicePromoteToSuperUserResults *) PromoteToSuperUser:(NSString *)userId {
	
	AuthUserServicePromoteToSuperUserResults *results = [[AuthUserServicePromoteToSuperUserResults alloc] init];
	AuthUserServicePromoteToSuperUserParams *params = [[AuthUserServicePromoteToSuperUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- DemoteFromSuperUser ---
- (AuthUserServiceDemoteFromSuperUserResults *) DemoteFromSuperUser:(NSString *)userId {
	
	AuthUserServiceDemoteFromSuperUserResults *results = [[AuthUserServiceDemoteFromSuperUserResults alloc] init];
	AuthUserServiceDemoteFromSuperUserParams *params = [[AuthUserServiceDemoteFromSuperUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- FollowUser ---
- (AuthUserServiceFollowUserResults *) FollowUser:(NSString *)userId {
	
	AuthUserServiceFollowUserResults *results = [[AuthUserServiceFollowUserResults alloc] init];
	AuthUserServiceFollowUserParams *params = [[AuthUserServiceFollowUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UnfollowUser ---
- (AuthUserServiceUnfollowUserResults *) UnfollowUser:(NSString *)userId {
	
	AuthUserServiceUnfollowUserResults *results = [[AuthUserServiceUnfollowUserResults alloc] init];
	AuthUserServiceUnfollowUserParams *params = [[AuthUserServiceUnfollowUserParams alloc] init];
	[params setUserId:userId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyFollowingUsers ---
- (AuthUserServiceMyFollowingUsersResults *) MyFollowingUsers {
	
	AuthUserServiceMyFollowingUsersResults *results = [[AuthUserServiceMyFollowingUsersResults alloc] init];
	AuthUserServiceMyFollowingUsersParams *params = [[AuthUserServiceMyFollowingUsersParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- PanelStatus ---
- (AuthUserServicePanelStatusResults *) PanelStatus {
	
	AuthUserServicePanelStatusResults *results = [[AuthUserServicePanelStatusResults alloc] init];
	AuthUserServicePanelStatusParams *params = [[AuthUserServicePanelStatusParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- Preferences ---
- (AuthUserServicePreferencesResults *) Preferences {
	
	AuthUserServicePreferencesResults *results = [[AuthUserServicePreferencesResults alloc] init];
	AuthUserServicePreferencesParams *params = [[AuthUserServicePreferencesParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdatePreferences ---
- (AuthUserServiceUpdatePreferencesResults *) UpdatePreferences:(PreferencesInput *)input {
	
	AuthUserServiceUpdatePreferencesResults *results = [[AuthUserServiceUpdatePreferencesResults alloc] init];
	AuthUserServiceUpdatePreferencesParams *params = [[AuthUserServiceUpdatePreferencesParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- AllEmbedUsers ---
- (AuthUserServiceAllEmbedUsersResults *) AllEmbedUsers {
	
	AuthUserServiceAllEmbedUsersResults *results = [[AuthUserServiceAllEmbedUsersResults alloc] init];
	AuthUserServiceAllEmbedUsersParams *params = [[AuthUserServiceAllEmbedUsersParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GroupEmbedUsers ---
- (AuthUserServiceGroupEmbedUsersResults *) GroupEmbedUsers {
	
	AuthUserServiceGroupEmbedUsersResults *results = [[AuthUserServiceGroupEmbedUsersResults alloc] init];
	AuthUserServiceGroupEmbedUsersParams *params = [[AuthUserServiceGroupEmbedUsersParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateUserProfile ---
- (AuthUserServiceUpdateUserProfileResults *) UpdateUserProfile:(UserProfileInput *)input {
	
	AuthUserServiceUpdateUserProfileResults *results = [[AuthUserServiceUpdateUserProfileResults alloc] init];
	AuthUserServiceUpdateUserProfileParams *params = [[AuthUserServiceUpdateUserProfileParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- MyCount ---
- (AuthUserServiceMyCountResults *) MyCount {
	
	AuthUserServiceMyCountResults *results = [[AuthUserServiceMyCountResults alloc] init];
	AuthUserServiceMyCountParams *params = [[AuthUserServiceMyCountParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ReadEntry ---
- (AuthUserServiceReadEntryResults *) ReadEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	AuthUserServiceReadEntryResults *results = [[AuthUserServiceReadEntryResults alloc] init];
	AuthUserServiceReadEntryParams *params = [[AuthUserServiceReadEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetInvitationsInfo ---
- (AuthUserServiceGetInvitationsInfoResults *) GetInvitationsInfo {
	
	AuthUserServiceGetInvitationsInfoResults *results = [[AuthUserServiceGetInvitationsInfoResults alloc] init];
	AuthUserServiceGetInvitationsInfoParams *params = [[AuthUserServiceGetInvitationsInfoParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- OrganizationsInfo ---
- (AuthUserServiceOrganizationsInfoResults *) OrganizationsInfo:(NSArray *)orgIds {
	
	AuthUserServiceOrganizationsInfoResults *results = [[AuthUserServiceOrganizationsInfoResults alloc] init];
	AuthUserServiceOrganizationsInfoParams *params = [[AuthUserServiceOrganizationsInfoParams alloc] init];
	[params setOrgIds:orgIds];
	
	//[DoRequest:params results:results];
	return results;
}

// --- OrganizationInfo ---
- (AuthUserServiceOrganizationInfoResults *) OrganizationInfo:(NSString *)orgId {
	
	AuthUserServiceOrganizationInfoResults *results = [[AuthUserServiceOrganizationInfoResults alloc] init];
	AuthUserServiceOrganizationInfoParams *params = [[AuthUserServiceOrganizationInfoParams alloc] init];
	[params setOrgId:orgId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- SearchOrganizations ---
- (AuthUserServiceSearchOrganizationsResults *) SearchOrganizations:(NSString *)query {
	
	AuthUserServiceSearchOrganizationsResults *results = [[AuthUserServiceSearchOrganizationsResults alloc] init];
	AuthUserServiceSearchOrganizationsParams *params = [[AuthUserServiceSearchOrganizationsParams alloc] init];
	[params setQuery:query];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateOrganization ---
- (AuthUserServiceUpdateOrganizationResults *) UpdateOrganization:(OrganizationInput *)input {
	
	AuthUserServiceUpdateOrganizationResults *results = [[AuthUserServiceUpdateOrganizationResults alloc] init];
	AuthUserServiceUpdateOrganizationParams *params = [[AuthUserServiceUpdateOrganizationParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- SwitchOrganization ---
- (AuthUserServiceSwitchOrganizationResults *) SwitchOrganization:(NSString *)orgId {
	
	AuthUserServiceSwitchOrganizationResults *results = [[AuthUserServiceSwitchOrganizationResults alloc] init];
	AuthUserServiceSwitchOrganizationParams *params = [[AuthUserServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- AcceptSharedGroupRequest ---
- (AuthUserServiceAcceptSharedGroupRequestResults *) AcceptSharedGroupRequest:(NSString *)fromOrgId sharedOrgId:(NSString *)sharedOrgId sharedGroupId:(NSString *)sharedGroupId fromUserId:(NSString *)fromUserId {
	
	AuthUserServiceAcceptSharedGroupRequestResults *results = [[AuthUserServiceAcceptSharedGroupRequestResults alloc] init];
	AuthUserServiceAcceptSharedGroupRequestParams *params = [[AuthUserServiceAcceptSharedGroupRequestParams alloc] init];
	[params setFromOrgId:fromOrgId];
	[params setSharedOrgId:sharedOrgId];
	[params setSharedGroupId:sharedGroupId];
	[params setFromUserId:fromUserId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- RejectSharedGroupRequest ---
- (AuthUserServiceRejectSharedGroupRequestResults *) RejectSharedGroupRequest:(NSString *)fromOrgId sharedOrgIdHex:(NSString *)sharedOrgIdHex sharedGroupIdHex:(NSString *)sharedGroupIdHex fromUserId:(NSString *)fromUserId {
	
	AuthUserServiceRejectSharedGroupRequestResults *results = [[AuthUserServiceRejectSharedGroupRequestResults alloc] init];
	AuthUserServiceRejectSharedGroupRequestParams *params = [[AuthUserServiceRejectSharedGroupRequestParams alloc] init];
	[params setFromOrgId:fromOrgId];
	[params setSharedOrgIdHex:sharedOrgIdHex];
	[params setSharedGroupIdHex:sharedGroupIdHex];
	[params setFromUserId:fromUserId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetOrgSettings ---
- (AuthUserServiceGetOrgSettingsResults *) GetOrgSettings {
	
	AuthUserServiceGetOrgSettingsResults *results = [[AuthUserServiceGetOrgSettingsResults alloc] init];
	AuthUserServiceGetOrgSettingsParams *params = [[AuthUserServiceGetOrgSettingsParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateOrgSettings ---
- (AuthUserServiceUpdateOrgSettingsResults *) UpdateOrgSettings:(OrgSettingsInput *)orgSettingInput {
	
	AuthUserServiceUpdateOrgSettingsResults *results = [[AuthUserServiceUpdateOrgSettingsResults alloc] init];
	AuthUserServiceUpdateOrgSettingsParams *params = [[AuthUserServiceUpdateOrgSettingsParams alloc] init];
	[params setOrgSettingInput:orgSettingInput];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CanCreateGroup ---
- (AuthUserServiceCanCreateGroupResults *) CanCreateGroup {
	
	AuthUserServiceCanCreateGroupResults *results = [[AuthUserServiceCanCreateGroupResults alloc] init];
	AuthUserServiceCanCreateGroupParams *params = [[AuthUserServiceCanCreateGroupParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CanInvitePeople ---
- (AuthUserServiceCanInvitePeopleResults *) CanInvitePeople {
	
	AuthUserServiceCanInvitePeopleResults *results = [[AuthUserServiceCanInvitePeopleResults alloc] init];
	AuthUserServiceCanInvitePeopleParams *params = [[AuthUserServiceCanInvitePeopleParams alloc] init];
	
	//[DoRequest:params results:results];
	return results;
}

// --- InvitePeople ---
- (AuthUserServiceInvitePeopleResults *) InvitePeople:(NSArray *)emails {
	
	AuthUserServiceInvitePeopleResults *results = [[AuthUserServiceInvitePeopleResults alloc] init];
	AuthUserServiceInvitePeopleParams *params = [[AuthUserServiceInvitePeopleParams alloc] init];
	[params setEmails:emails];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CancelInvitation ---
- (AuthUserServiceCancelInvitationResults *) CancelInvitation:(NSString *)email {
	
	AuthUserServiceCancelInvitationResults *results = [[AuthUserServiceCancelInvitationResults alloc] init];
	AuthUserServiceCancelInvitationParams *params = [[AuthUserServiceCancelInvitationParams alloc] init];
	[params setEmail:email];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ResendInvitation ---
- (AuthUserServiceResendInvitationResults *) ResendInvitation:(NSString *)email {
	
	AuthUserServiceResendInvitationResults *results = [[AuthUserServiceResendInvitationResults alloc] init];
	AuthUserServiceResendInvitationParams *params = [[AuthUserServiceResendInvitationParams alloc] init];
	[params setEmail:email];
	
	//[DoRequest:params results:results];
	return results;
}

// --- PrepareChangeEmail ---
- (AuthUserServicePrepareChangeEmailResults *) PrepareChangeEmail:(NSString *)newEmail {
	
	AuthUserServicePrepareChangeEmailResults *results = [[AuthUserServicePrepareChangeEmailResults alloc] init];
	AuthUserServicePrepareChangeEmailParams *params = [[AuthUserServicePrepareChangeEmailParams alloc] init];
	[params setNewEmail:newEmail];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ChangeEmail ---
- (AuthUserServiceChangeEmailResults *) ChangeEmail:(NSString *)token {
	
	AuthUserServiceChangeEmailResults *results = [[AuthUserServiceChangeEmailResults alloc] init];
	AuthUserServiceChangeEmailParams *params = [[AuthUserServiceChangeEmailParams alloc] init];
	[params setToken:token];
	
	//[DoRequest:params results:results];
	return results;
}

// --- UpdateAccount ---
- (AuthUserServiceUpdateAccountResults *) UpdateAccount:(MemberAccountInput *)input {
	
	AuthUserServiceUpdateAccountResults *results = [[AuthUserServiceUpdateAccountResults alloc] init];
	AuthUserServiceUpdateAccountParams *params = [[AuthUserServiceUpdateAccountParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}

// --- SendSharingInvitation ---
- (AuthUserServiceSendSharingInvitationResults *) SendSharingInvitation:(NSString *)groupId email:(NSString *)email isResend:(BOOL)isResend {
	
	AuthUserServiceSendSharingInvitationResults *results = [[AuthUserServiceSendSharingInvitationResults alloc] init];
	AuthUserServiceSendSharingInvitationParams *params = [[AuthUserServiceSendSharingInvitationParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	[params setIsResend:isResend];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetSharingInvitationItems ---
- (AuthUserServiceGetSharingInvitationItemsResults *) GetSharingInvitationItems:(NSString *)groupId {
	
	AuthUserServiceGetSharingInvitationItemsResults *results = [[AuthUserServiceGetSharingInvitationItemsResults alloc] init];
	AuthUserServiceGetSharingInvitationItemsParams *params = [[AuthUserServiceGetSharingInvitationItemsParams alloc] init];
	[params setGroupId:groupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- CancelSharing ---
- (AuthUserServiceCancelSharingResults *) CancelSharing:(NSString *)groupId email:(NSString *)email {
	
	AuthUserServiceCancelSharingResults *results = [[AuthUserServiceCancelSharingResults alloc] init];
	AuthUserServiceCancelSharingParams *params = [[AuthUserServiceCancelSharingParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	
	//[DoRequest:params results:results];
	return results;
}

// --- StopSharingGroup ---
- (AuthUserServiceStopSharingGroupResults *) StopSharingGroup:(NSString *)GroupId toStopOrgId:(NSString *)toStopOrgId {
	
	AuthUserServiceStopSharingGroupResults *results = [[AuthUserServiceStopSharingGroupResults alloc] init];
	AuthUserServiceStopSharingGroupParams *params = [[AuthUserServiceStopSharingGroupParams alloc] init];
	[params setGroupId:GroupId];
	[params setToStopOrgId:toStopOrgId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- LeaveSharingGroup ---
- (AuthUserServiceLeaveSharingGroupResults *) LeaveSharingGroup:(NSString *)GroupId {
	
	AuthUserServiceLeaveSharingGroupResults *results = [[AuthUserServiceLeaveSharingGroupResults alloc] init];
	AuthUserServiceLeaveSharingGroupParams *params = [[AuthUserServiceLeaveSharingGroupParams alloc] init];
	[params setGroupId:GroupId];
	
	//[DoRequest:params results:results];
	return results;
}

// --- ShareChat ---
- (AuthUserServiceShareChatResults *) ShareChat:(ShareChatInput *)input {
	
	AuthUserServiceShareChatResults *results = [[AuthUserServiceShareChatResults alloc] init];
	AuthUserServiceShareChatParams *params = [[AuthUserServiceShareChatParams alloc] init];
	[params setInput:input];
	
	//[DoRequest:params results:results];
	return results;
}
@end

@implementation Global : NSObject


// --- GetSession ---
- (GlobalGetSessionResults *) GetSession:(NSString *)email password:(NSString *)password {
	
	GlobalGetSessionResults *results = [[GlobalGetSessionResults alloc] init];
	GlobalGetSessionParams *params = [[GlobalGetSessionParams alloc] init];
	[params setEmail:email];
	[params setPassword:password];
	
	//[DoRequest:params results:results];
	return results;
}

// --- GetAuthUserService ---
- (AuthUserService *) GetAuthUserService:(NSString *)session {
	
	AuthUserService *results = [[AuthUserService alloc] init];
	[results setSession:session];
	
	//[DoRequest:params results:results];
	return results;
}
@end



